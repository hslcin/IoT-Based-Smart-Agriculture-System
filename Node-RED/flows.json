[
    {
        "id": "2325619c7893e2d0",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5b925f4fdc6e37c2",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "a945e3db5ff6ef2b",
        "type": "mqtt-broker",
        "name": "TTN MQTT",
        "broker": "au1.cloud.thethings.network",
        "port": "8883",
        "tls": "5b925f4fdc6e37c2",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0ec807ffa95d75c2",
        "type": "telegram bot",
        "botname": "Smart_Plant_Telegram_Bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "addressfamily": "4",
        "pollinterval": 300,
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": 6667,
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbothost": "0.0.0.0",
        "localbotport": 8443,
        "publicbotport": 8443,
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": true
    },
    {
        "id": "26757a6357b4f1b9",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "IoT",
        "name": "influxdb",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "048cff9964cbfe61",
        "type": "mqtt in",
        "z": "2325619c7893e2d0",
        "name": "",
        "topic": "v3/smart-agriculture-app@ttn/devices/device-1/up",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a945e3db5ff6ef2b",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 100,
        "wires": [
            [
                "fa7e8cf4f47c6c30"
            ]
        ]
    },
    {
        "id": "fa7e8cf4f47c6c30",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "Extract Lux & PIR from TTN Payload Function",
        "func": "// TTN MQTT payload extraction function for Node-RED\n// This function extracts:\n//  - Ambient light value (lux) from first 2 bytes (big-endian)\n//  - PIR sensor value (0 or 1) from 3rd byte\n//  - RSSI and SNR from TTN metadata\n//  - Device ID from the TTN message\n//  - Location and Sensor Type (hardcoded)\n\n// Step 1: Check and parse the input payload if it's a string\nvar ttnMsg = msg.payload;\nif (typeof ttnMsg === \"string\") {\n    try {\n        ttnMsg = JSON.parse(ttnMsg);\n    } catch (err) {\n        node.error(\"Invalid JSON payload: \" + err);\n        return null;\n    }\n}\n\n// Step 2: Validate required fields\nif (!ttnMsg.uplink_message || !ttnMsg.uplink_message.frm_payload) {\n    node.error(\"Missing uplink_message or frm_payload in message\");\n    return null;\n}\n\n// Step 3: Decode the base64 payload into a buffer\nvar frmPayload = ttnMsg.uplink_message.frm_payload;\nvar buffer = Buffer.from(frmPayload, 'base64');\n\n// Step 4: Ensure the payload is at least 3 bytes long\nif (buffer.length < 3) {\n    node.error(\"Payload is too short. Expected at least 3 bytes.\");\n    return null;\n}\n\n// Step 5: Extract sensor data from buffer\nvar lux = (buffer[0] << 8) | buffer[1];  // Ambient light in lux (16-bit big-endian)\nvar pir = buffer[2];                    // PIR sensor state (1 byte)\n\n// Step 6: Attempt to extract RSSI and SNR from metadata\nvar rssi = null;\nvar snr = null;\n\nif (Array.isArray(ttnMsg.uplink_message.rx_metadata) && ttnMsg.uplink_message.rx_metadata.length > 0) {\n    var metadata = ttnMsg.uplink_message.rx_metadata[0]; // Use first gateway metadata\n    rssi = metadata.rssi !== undefined ? metadata.rssi : null;\n    snr = metadata.snr !== undefined ? metadata.snr : null;\n} else if (ttnMsg.uplink_message.settings) {\n    snr = ttnMsg.uplink_message.settings.snr !== undefined ? ttnMsg.uplink_message.settings.snr : null;\n}\n\n// Step 7: Extract device ID\nvar deviceId = ttnMsg.end_device_ids && ttnMsg.end_device_ids.device_id ? ttnMsg.end_device_ids.device_id : null;\n\n// Step 8: Output the extracted values\nmsg.payload = {\n    device_id: deviceId,     // TTN Device ID\n    lux: lux,                // Ambient light intensity in lux\n    pir: pir,                // PIR sensor reading (0 or 1)\n    rssi: rssi,              // Received Signal Strength Indicator\n    snr: snr,                // Signal-to-Noise Ratio\n    location: 'Punggol',     // Fixed location identifier\n    sensor_type: 'lux_pir'   // Sensor type descriptor\n    // raw: buffer.toString('hex') // Optional raw payload\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 100,
        "wires": [
            [
                "ac69b93263e61f38",
                "78595b1c65273464",
                "c610e3debf987ac4",
                "3bfd21347895c215"
            ]
        ]
    },
    {
        "id": "82e913946ea611d7",
        "type": "mqtt in",
        "z": "2325619c7893e2d0",
        "name": "",
        "topic": "v3/smart-agriculture-app@ttn/devices/device-2/up",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a945e3db5ff6ef2b",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 300,
        "wires": [
            [
                "dc88c57b04bca2da"
            ]
        ]
    },
    {
        "id": "dc88c57b04bca2da",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "Extract Moisture Payload Function",
        "func": "/*\n  This Node-RED function extracts sensor data, RSSI, SNR, device_id, and adds fixed metadata like location and sensor type.\n  - Decodes the base64-encoded \"frm_payload\" to extract a sensor value (2-byte big-endian).\n  - Extracts RSSI and SNR from the uplink metadata (if available).\n  - Adds device_id from TTN message.\n  - Adds fixed location ('Punggol') and sensor_type ('moisture').\n*/\n\nif (\n    msg.payload &&\n    msg.payload.uplink_message &&\n    msg.payload.uplink_message.frm_payload\n) {\n    var uplink = msg.payload.uplink_message;\n\n    // Step 1: Decode base64 payload to Buffer\n    var buffer = Buffer.from(uplink.frm_payload, 'base64');\n\n    // Step 2: Extract sensor value (first 2 bytes, big-endian)\n    var sensorValue = null;\n    if (buffer.length >= 2) {\n        sensorValue = (buffer[0] << 8) | buffer[1];\n    }\n\n    // Step 3: Extract RSSI and SNR from metadata (if available)\n    var rssi = null;\n    var snr = null;\n    if (\n        uplink.rx_metadata &&\n        uplink.rx_metadata.length > 0\n    ) {\n        // Use the first gateway's metadata\n        var metadata = uplink.rx_metadata[0];\n        rssi = metadata.rssi !== undefined ? metadata.rssi : null;\n        snr = metadata.snr !== undefined ? metadata.snr : null;\n    }\n\n    // Step 4: Extract device_id (if available)\n    var deviceId = null;\n    if (\n        msg.payload.end_device_ids &&\n        msg.payload.end_device_ids.device_id\n    ) {\n        deviceId = msg.payload.end_device_ids.device_id;\n    }\n\n    // Step 5: Return structured payload with added metadata\n    msg.payload = {\n        device_id: deviceId,\n        sensor_type: \"moisture\",\n        location: \"Punggol\",\n        moistureSensorValue: sensorValue,\n        rssi: rssi,\n        snr: snr\n    };\n\n} else {\n    msg.payload = { error: \"Invalid TTN payload structure.\" };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 300,
        "wires": [
            [
                "0abb1b1e65963195",
                "083534069aa76afc",
                "c81af4faf4454417",
                "21251c87160238d7"
            ]
        ]
    },
    {
        "id": "515ba823ae6920eb",
        "type": "mqtt out",
        "z": "2325619c7893e2d0",
        "name": "",
        "topic": "v3/smart-agriculture-app@ttn/devices/device-2/down/push",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a945e3db5ff6ef2b",
        "x": 1210,
        "y": 520,
        "wires": []
    },
    {
        "id": "0abb1b1e65963195",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "Relay Control Function",
        "func": "/*\n   This node reads msg.payload.moistureSensorValue (set by your existing extraction node).\n   If moistureSensorValue < 300, it sends the downlink to turn the relay ON (\"AQ==\").\n   Otherwise, it sends the downlink to turn the relay OFF (\"AA==\").\n*/\n\n// Check if moistureSensorValue exists\nif (msg.payload && msg.payload.moistureSensorValue !== undefined) {\n    let sensorValue = msg.payload.moistureSensorValue;\n\n    if (sensorValue < 300) {\n        // Relay ON\n        msg.payload.moisture = {\n            downlinks: [\n                {\n                    f_port: 1,\n                    frm_payload: \"AQ==\", // Base64 for ON\n                    priority: \"HIGH\"\n                }\n            ]\n        };\n    } else {\n        // Relay OFF\n        msg.payload.moisture = {\n            downlinks: [\n                {\n                    f_port: 1,\n                    frm_payload: \"AA==\", // Base64 for OFF\n                    priority: \"HIGH\"\n                }\n            ]\n        };\n    }\n} else {\n    // Handle error: sensor value not found\n    //msg.payload.moisture = { error: \"No moistureSensorValue found in msg.payload.\" };\n    return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 360,
        "wires": [
            [
                "61c3b90cf99a473f",
                "73b9d709e1f98f31",
                "40d0dfc16b6a6eba"
            ]
        ]
    },
    {
        "id": "f4611da47ae7ef01",
        "type": "telegram receiver",
        "z": "2325619c7893e2d0",
        "name": "",
        "bot": "0ec807ffa95d75c2",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 130,
        "y": 600,
        "wires": [
            [
                "9fec59b334d322ff"
            ],
            [
                "9fec59b334d322ff"
            ]
        ]
    },
    {
        "id": "9fec59b334d322ff",
        "type": "debug",
        "z": "2325619c7893e2d0",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 600,
        "wires": []
    },
    {
        "id": "3d9db6c0268bb827",
        "type": "telegram sender",
        "z": "2325619c7893e2d0",
        "name": "",
        "bot": "0ec807ffa95d75c2",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1210,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "ac69b93263e61f38",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "Detect Motion & Notify Telegram Function",
        "func": "// Retrieve the previous PIR state from context (default to 0 if not set)\nvar prevPir = context.get('prevPir') || 0;\n\n// Extract the current PIR value from the incoming payload\nvar currentPir = (msg.payload && typeof msg.payload.pir !== 'undefined') ? msg.payload.pir : 0;\n\n// Only send a message if the PIR value changes from 0 to 1\nif (prevPir === 0 && currentPir === 1) {\n    // Update context with the current state\n    context.set('prevPir', currentPir);\n\n    // Build the Telegram-compatible payload\n    msg.payload = {\n        chatId: -1002694024012,  // Example chat ID\n        type: \"message\",\n        content: \"🚨 PIR Motion Detected Object!\"\n    };\n    // Remove any extraneous options property to prevent conflicts\n    delete msg.options;\n    return msg;\n} else {\n    // Update the stored state even if no message is sent\n    context.set('prevPir', currentPir);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 40,
        "wires": [
            [
                "3d9db6c0268bb827"
            ]
        ]
    },
    {
        "id": "835a168b723e1bc8",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "send relay status toggle function",
        "func": "// Ensure payload exists and contains a valid downlink array\nif (msg.payload && msg.payload.downlinks && msg.payload.downlinks.length > 0) {\n    // Extract the relay command from the first downlink item\n    let relayPayload = msg.payload.downlinks[0].frm_payload;\n    let currentState;\n\n    // Determine current state from payload\n    if (relayPayload === \"AQ==\") { // Relay is ON\n        currentState = \"ON\";\n    } else if (relayPayload === \"AA==\") { // Relay is OFF\n        currentState = \"OFF\";\n    } else {\n        // If the frm_payload is not recognized, drop the message or handle error\n        return null;\n    }\n\n    // Retrieve the previous state from context (node-level storage)\n    let previousState = context.get(\"previousState\");\n\n    // If previous state is not set (first run), initialize it without sending a message\n    if (previousState === undefined) {\n        context.set(\"previousState\", currentState);\n        return null;\n    }\n\n    // If the current state is the same as the previous, do nothing (no state change)\n    if (currentState === previousState) {\n        return null;\n    }\n\n    // A state change occurred; update the stored previous state\n    context.set(\"previousState\", currentState);\n\n    // Prepare the Telegram message payload based on the new state with different emojis\n    if (currentState === \"ON\") {\n        msg.payload = {\n            chatId: -1002694024012,  // Use your specific Telegram chat ID here\n            type: \"message\",\n            content: \"Pump Relay On 🚰\"\n        };\n    } else if (currentState === \"OFF\") {\n        msg.payload = {\n            chatId: -1002694024012,  // Use your specific Telegram chat ID here\n            type: \"message\",\n            content: \"Pump Relay Off 🚱\"\n        };\n    }\n\n    // Clean up any extraneous properties that might conflict with the Telegram node\n    delete msg.options;\n    return msg;\n} else {\n    // If no valid payload is found, drop the message\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 320,
        "wires": [
            [
                "3d9db6c0268bb827"
            ]
        ]
    },
    {
        "id": "845690049a01303a",
        "type": "influxdb out",
        "z": "2325619c7893e2d0",
        "influxdb": "26757a6357b4f1b9",
        "name": "influxdb",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "hslcing",
        "bucket": "IoT",
        "x": 880,
        "y": 200,
        "wires": []
    },
    {
        "id": "78595b1c65273464",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "Send lux/pir sensor data to influxdb function",
        "func": "// Step 1: Check if payload exists\nif (!msg.payload) {\n    node.error(\"No payload found\");\n    return null;\n}\n\n// Step 2: Extract incoming sensor data (assumes fields: 'lux', 'pir', 'device_id', 'location', 'sensor_type', 'rssi', 'snr')\nvar sensorData = msg.payload;\n\n// Step 3: Define the measurement name for InfluxDB\nmsg.measurement = \"sensor_data\";\n\n// Step 4: Structure the fields for InfluxDB (key-value pairs that represent sensor measurements)\n// These are values that change frequently and are stored as numeric data\nmsg.payload = {\n    lux: sensorData.lux,\n    pir: sensorData.pir,\n    rssi: sensorData.rssi,\n    snr: sensorData.snr\n};\n\n// Step 5: Define the tags for InfluxDB (static descriptors used for indexing and filtering)\n// Tags should be strings and low-cardinality\nmsg.tags = {\n    device_id: sensorData.device_id || \"unknown_device\",\n    location: sensorData.location || \"unknown_location\",\n    sensor_type: sensorData.sensor_type || \"unknown_sensor\"\n};\n\n// Step 6: Add a timestamp (optional, if not set InfluxDB will generate one automatically)\nmsg.timestamp = new Date();\n\n// node.warn(msg);    // Logs only the msg that will be sent to InfluxDB\n\n// Step 7: Return the modified message object to InfluxDB output\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 160,
        "wires": [
            [
                "845690049a01303a"
            ]
        ]
    },
    {
        "id": "083534069aa76afc",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "send moisture sensor data to influxdb function",
        "func": "// Step 1: Check if payload exists and doesn't already contain an error\nif (!msg.payload || msg.payload.error) {\n    node.error(\"Invalid or missing sensor data: \" + (msg.payload ? msg.payload.error : \"No payload\"));\n    return null;\n}\n\n// Step 2: Extract values from the payload\nvar sensorValue = msg.payload.moistureSensorValue;\nvar rssi = msg.payload.rssi;\nvar snr = msg.payload.snr;\nvar deviceId = msg.payload.device_id;\nvar location = msg.payload.location;\nvar sensorType = msg.payload.sensor_type;\n\n// Step 3: Validate that sensorValue, rssi, and snr are numbers\nif (typeof sensorValue !== 'number') {\n    node.error(\"Sensor value is not a number.\");\n    return null;\n}\nif (typeof rssi !== 'number') {\n    node.error(\"RSSI is not a number.\");\n    return null;\n}\nif (typeof snr !== 'number') {\n    node.error(\"SNR is not a number.\");\n    return null;\n}\n\n// Step 4: Set the InfluxDB measurement name\nmsg.measurement = \"sensor_data\";\n\n// Step 5: Set InfluxDB tags\nmsg.tags = {\n    device_id: deviceId || \"unknown_device\",\n    location: location || \"unknown_location\",\n    sensor_type: sensorType || \"moisture_sensor\"\n};\n\n// Step 6: Set InfluxDB fields (the actual data values to be stored)\nmsg.payload = {\n    moistureSensorValue: sensorValue,\n    rssi: rssi,\n    snr: snr\n};\n\n//node.warn(msg);    // Logs only the msg that will be sent to InfluxDB\n\n// Step 7: Set optional timestamp\nmsg.timestamp = new Date();\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "845690049a01303a"
            ]
        ]
    },
    {
        "id": "http_request_1",
        "type": "http request",
        "z": "2325619c7893e2d0",
        "name": "NEA 2-Hr Forecast",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api-open.data.gov.sg/v2/real-time/api/two-hr-forecast",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 420,
        "wires": [
            [
                "73b9d709e1f98f31",
                "6e1c34fc277ce51e"
            ]
        ]
    },
    {
        "id": "73b9d709e1f98f31",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "rain forecast & moisture relay control function",
        "func": "// Check if sensor payload from the first node exists\nif (\n    msg.payload.moisture &&\n    msg.payload.moisture.downlinks &&\n    msg.payload.moisture.downlinks[0] &&\n    msg.payload.moisture.downlinks[0].frm_payload\n) {\n    let sensorCommand = msg.payload.moisture.downlinks[0].frm_payload;\n    \n    if (sensorCommand === \"AA==\") {\n        // Sensor commands relay OFF; override and send relay OFF.\n        msg.payload = {\n            downlinks: [\n                {\n                    f_port: 1,\n                    frm_payload: \"AA==\", // Relay OFF\n                    priority: \"HIGH\"\n                }\n            ]\n        };\n        return msg;\n    } else if (sensorCommand === \"AQ==\") {\n        // Sensor commands relay ON; do nothing further and return null.\n        return null;\n    }\n}\n\n// If no sensor payload is provided, then process forecast data:\nif (\n    msg.payload &&\n    msg.payload.data &&\n    msg.payload.data.items &&\n    Array.isArray(msg.payload.data.items) &&\n    msg.payload.data.items.length > 0\n) {\n    // Assume the first item contains forecast info\n    let forecasts = msg.payload.data.items[0].forecasts;\n    let punggolForecast = null;\n    \n    // Look for forecast for Punggol\n    for (let i = 0; i < forecasts.length; i++) {\n        if (forecasts[i].area === \"Punggol\") {\n            punggolForecast = forecasts[i].forecast;\n            break;\n        }\n    }\n    \n    if (punggolForecast) {\n        // Check forecast text for \"rain\" or \"showers\" (case-insensitive)\n        let forecastLower = punggolForecast.toLowerCase();\n        if (forecastLower.includes(\"rain\") || forecastLower.includes(\"showers\")) {\n            // Forecast indicates rain: turn relay OFF.\n            msg.payload = {\n                downlinks: [\n                    {\n                        f_port: 1,\n                        frm_payload: \"AA==\", // Relay OFF\n                        priority: \"HIGH\"\n                    }\n                ]\n            };\n        } else {\n            // Otherwise, turn relay ON.\n            msg.payload = {\n                downlinks: [\n                    {\n                        f_port: 1,\n                        frm_payload: \"AQ==\", // Relay ON\n                        priority: \"HIGH\"\n                    }\n                ]\n            };\n        }\n    } else {\n        // No forecast available for Punggol.\n        msg.payload = { error: \"No forecast found for area Punggol.\" };\n    }\n} else {\n    // Expected forecast data structure is missing.\n    msg.payload = { error: \"No forecast data found in msg.payload.\" };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 420,
        "wires": [
            [
                "4b8acdbdcdb97470",
                "515ba823ae6920eb",
                "835a168b723e1bc8",
                "f4111424fdf23f35",
                "4c47ae4d6949fe89"
            ]
        ]
    },
    {
        "id": "61c3b90cf99a473f",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "trigger NEA forecast if relay on: soil dry function",
        "func": "/*\n   This function checks the output of the previous relay control node.\n   If Relay is ON (frm_payload \"AQ==\"), it triggers the NEA API HTTP GET by setting the payload to the current date.\n   If Relay is OFF (frm_payload \"AA==\"), it does nothing.\n*/\n\nif (msg.payload.moisture && msg.payload.moisture.downlinks && msg.payload.moisture.downlinks.length > 0) {\n    let relayState = msg.payload.moisture.downlinks[0].frm_payload;\n    \n    if (relayState === \"AQ==\") {\n        // Relay is ON: set payload to current date/time to trigger the HTTP GET request.\n        msg.payload = new Date();  // current date/time as a Date object\n        return msg;\n    } else {\n        // Relay is OFF: do nothing.\n        return null;\n    }\n} else {\n    // If the expected structure is missing, do nothing.\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 420,
        "wires": [
            [
                "http_request_1"
            ]
        ]
    },
    {
        "id": "7b7684f4a9cc32e1",
        "type": "influxdb out",
        "z": "2325619c7893e2d0",
        "influxdb": "26757a6357b4f1b9",
        "name": "influxdb",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "hslcing",
        "bucket": "IoT",
        "x": 880,
        "y": 560,
        "wires": []
    },
    {
        "id": "4b8acdbdcdb97470",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "send relay status to influxdb",
        "func": "// Ensure the payload exists and contains a valid downlinks array\nif (msg.payload && Array.isArray(msg.payload.downlinks) && msg.payload.downlinks.length > 0) {\n    // Step 1: Extract the relay command from the first downlink item's frm_payload\n    let relayPayload = msg.payload.downlinks[0].frm_payload;\n    let currentState;\n\n    // Step 2: Determine the current relay state from the base64 payload\n    if (relayPayload === \"AQ==\") {\n        currentState = \"ON\"; // Relay is ON\n    } else if (relayPayload === \"AA==\") {\n        currentState = \"OFF\"; // Relay is OFF\n    } else {\n        // Step 3: If the payload is unrecognized, discard the message\n        return null;\n    }\n\n    // Step 4: Prepare the payload for InfluxDB with measurement and tags\n    msg.measurement = \"irrigation_event\"; // InfluxDB measurement name\n    msg.payload = {\n        relayState: currentState\n    };\n\n    // Step 5: Add tags, including the location\n    msg.tags = {\n        location: \"Punggol\"\n    };\n\n    // Step 6: Optionally include a timestamp (used by InfluxDB)\n    msg.timestamp = new Date();\n\n    return msg;\n} else {\n    // No valid payload found, discard the message\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 560,
        "wires": [
            [
                "7b7684f4a9cc32e1"
            ]
        ]
    },
    {
        "id": "6e1c34fc277ce51e",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "send rain forecast to influxdb function",
        "func": "// Step 1: Validate payload existence and check for error\nif (!msg.payload || msg.payload.error) {\n    node.error(\"Invalid or missing forecast data: \" + (msg.payload ? msg.payload.error : \"No payload\"));\n    return null;\n}\n\n// Step 2: Ensure forecast data structure is valid\nconst items = msg.payload.data?.items;\nif (!items || !Array.isArray(items) || items.length === 0) {\n    node.error(\"Forecast data structure is missing or empty.\");\n    return null;\n}\n\n// Step 3: Extract forecasts array\nconst forecasts = items[0].forecasts;\nif (!forecasts || !Array.isArray(forecasts)) {\n    node.error(\"Forecasts array is missing or not an array.\");\n    return null;\n}\n\n// Step 4: Search for Punggol forecast\nlet weatherForecast = null;\nfor (let i = 0; i < forecasts.length; i++) {\n    if (forecasts[i].area === \"Punggol\") {\n        weatherForecast = forecasts[i].forecast;\n        break;\n    }\n}\n\n// Step 5: Validate forecast result\nif (typeof weatherForecast !== 'string') {\n    node.error(\"Forecast for Punggol not found or invalid.\");\n    return null;\n}\n\n// Step 6: Prepare payload for InfluxDB\nmsg.measurement = \"irrigation_event\";\nmsg.payload = {\n    weather_forecast: weatherForecast\n};\n\n// Step 7: Add tags (location: Punggol) and timestamp\nmsg.tags = {\n    location: \"Punggol\"\n};\nmsg.timestamp = new Date();  // Optional: InfluxDB uses this as measurement time\n\n// Step 8: Return modified message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 500,
        "wires": [
            [
                "7b7684f4a9cc32e1"
            ]
        ]
    },
    {
        "id": "f4111424fdf23f35",
        "type": "debug",
        "z": "2325619c7893e2d0",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 420,
        "wires": []
    },
    {
        "id": "4c47ae4d6949fe89",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "Calculate Water Cost Function",
        "func": "/*\n   This function calculates water cost based on the irrigation duration (relay ON time).\n   It uses a fixed water tariff of SGD $1.21/m³ and an assumed flow rate of 0.1 m³/min.\n   When a relay ON command (\"AQ==\") is received, it stores the timestamp (if not already set).\n   When a relay OFF command (\"AA==\") is received, it calculates the duration, water volume, and cost.\n\n   NOTE: We use getTime() on Date objects to avoid TypeScript errors during date arithmetic.\n*/\n\n// Validate payload structure\nif (!msg.payload || !msg.payload.downlinks || !Array.isArray(msg.payload.downlinks) || msg.payload.downlinks.length === 0) {\n    node.error(\"Missing or invalid downlinks in payload.\");\n    return null;\n}\n\n// Extract relay command from the first downlink item\nvar relayCmd = msg.payload.downlinks[0].frm_payload;\n\n// Retrieve stored relay ON time from context\nvar relayOnTime = context.get('relayOnTime');\n\nif (relayCmd === \"AQ==\") {\n    // Relay is turning ON: store the current timestamp only if not already stored\n    if (!relayOnTime) {\n        context.set('relayOnTime', new Date());\n    }\n    // No calculation yet\n    return null;\n\n} else if (relayCmd === \"AA==\") {\n    // Relay is turning OFF: proceed to calculate duration and water cost\n    if (!relayOnTime) {\n        node.error(\"Relay OFF received without a recorded relay ON time.\");\n        return null;\n    }\n\n    // Convert both timestamps to numeric values for calculation\n    var nowTimestamp = new Date().getTime();\n    var onTimestamp = new Date(relayOnTime).getTime();\n    var durationMs = nowTimestamp - onTimestamp;\n    var durationMinutes = durationMs / 60000; // Convert to minutes\n\n    // Constants\n    var flowRate = 0.1; // in m³/min\n    var waterRate = 3.24; // SGD per m³\n\n    // Compute water volume and cost\n    var waterVolume = durationMinutes * flowRate;\n    var waterCost = waterVolume * waterRate;\n\n    // Format message payload for InfluxDB\n    msg.measurement = \"irrigation_event\";\n    msg.payload = {\n        waterCost: waterCost,\n        irrigationDurationMinutes: durationMinutes\n    };\n    msg.tags = {\n        location: \"Punggol\"\n    };\n    msg.timestamp = new Date();\n\n    // Clear the stored ON time\n    context.set('relayOnTime', null);\n\n    node.warn(msg);    // Logs only the msg that will be sent to InfluxDB\n\n    return msg;\n\n} else {\n    node.error(\"Unrecognized relay command: \" + relayCmd);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 620,
        "wires": [
            [
                "7b7684f4a9cc32e1"
            ]
        ]
    },
    {
        "id": "c81af4faf4454417",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "Moisture Sensor Watchdog Timer Function",
        "func": "/*\n  Moisture Sensor Watchdog Timer Function\n  -----------------------------------------\n  This function continuously monitors for uplink messages from the Moisture Sensor.\n  - On each incoming message it clears any existing timer and starts a fresh one.\n  - If no message is received for 40 seconds, it sends a Telegram alert (with emojis) and restarts the timer.\n  \n  Wire this node after your Moisture extraction function and connect its output to your Telegram sender.\n*/\n\nvar sourceName = \"Moisture Sensor\";  // Identifies the monitored node\n\n// Clear any existing timer\nif (context.timer) {\n  clearTimeout(context.timer);\n}\n\n// Function to start (or restart) the timer\nfunction startTimer() {\n  context.timer = setTimeout(function () {\n    var alertMsg = {\n      payload: {\n        chatId: -1002694024012,  // Replace with your actual Telegram chat ID\n        type: \"message\",\n        content: \"🚨⚠️ Alert: No uplink message received from \" + sourceName + \" for more than 40 seconds! ⏰\"\n      }\n    };\n    // Send the alert message to the Telegram sender node\n    node.send(alertMsg);\n    // Restart the timer so alerts continue every 40 seconds if still silent\n    startTimer();\n  }, 40000);\n}\n\n// Start the timer\nstartTimer();\n\n// Do not pass along the current incoming message\nreturn null;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 240,
        "wires": [
            [
                "3d9db6c0268bb827",
                "19a6b1c23939fac7"
            ]
        ]
    },
    {
        "id": "c610e3debf987ac4",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "Lux & PIR Watchdog Timer Function",
        "func": "/*\n  Lux & PIR Watchdog Timer Function\n  ----------------------------------\n  This function continuously monitors for uplink messages from the Lux & PIR sensor node.\n  - On each incoming message it clears any existing timer and starts a fresh one.\n  - If no message is received for 40 seconds, it sends a Telegram alert (with emojis) and restarts the timer.\n  \n  Wire this node after your Lux & PIR extraction function and connect its output to your Telegram sender.\n*/\n\nvar sourceName = \"Lux & PIR Sensor\";  // Identifies the monitored node\n\n// Clear any existing timer\nif (context.timer) {\n  clearTimeout(context.timer);\n}\n\n// Function to start (or restart) the timer\nfunction startTimer() {\n  context.timer = setTimeout(function () {\n    var alertMsg = {\n      payload: {\n        chatId: -1002694024012,  // Replace with your actual Telegram chat ID\n        type: \"message\",\n        content: \"🚨⚠️ Alert: No uplink message received from \" + sourceName + \" for more than 40 seconds! ⏰\"\n      }\n    };\n    // Send the alert message to the Telegram sender node\n    node.send(alertMsg);\n    // Restart the timer so alerts continue every 40 seconds if still silent\n    startTimer();\n  }, 40000);\n}\n\n// Start the timer\nstartTimer();\n\n// Do not pass along the current incoming message\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 140,
        "wires": [
            [
                "3d9db6c0268bb827",
                "030a038d198a7406"
            ]
        ]
    },
    {
        "id": "19a6b1c23939fac7",
        "type": "debug",
        "z": "2325619c7893e2d0",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 240,
        "wires": []
    },
    {
        "id": "030a038d198a7406",
        "type": "debug",
        "z": "2325619c7893e2d0",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 140,
        "wires": []
    },
    {
        "id": "3bfd21347895c215",
        "type": "debug",
        "z": "2325619c7893e2d0",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 100,
        "wires": []
    },
    {
        "id": "40d0dfc16b6a6eba",
        "type": "debug",
        "z": "2325619c7893e2d0",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 360,
        "wires": []
    },
    {
        "id": "21251c87160238d7",
        "type": "debug",
        "z": "2325619c7893e2d0",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 300,
        "wires": []
    }
]