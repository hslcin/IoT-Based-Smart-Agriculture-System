[
    {
        "id": "2325619c7893e2d0",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5b925f4fdc6e37c2",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "a945e3db5ff6ef2b",
        "type": "mqtt-broker",
        "name": "TTN MQTT",
        "broker": "au1.cloud.thethings.network",
        "port": "8883",
        "tls": "5b925f4fdc6e37c2",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0ec807ffa95d75c2",
        "type": "telegram bot",
        "botname": "Smart_Plant_Telegram_Bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "pollinterval": 300,
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": 6667,
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbothost": "0.0.0.0",
        "localbotport": 8443,
        "publicbotport": 8443,
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": true
    },
    {
        "id": "26757a6357b4f1b9",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "IoT",
        "name": "influxdb",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "048cff9964cbfe61",
        "type": "mqtt in",
        "z": "2325619c7893e2d0",
        "name": "",
        "topic": "v3/smart-agriculture-app@ttn/devices/device-1/up",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a945e3db5ff6ef2b",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 100,
        "wires": [
            [
                "fa7e8cf4f47c6c30"
            ]
        ]
    },
    {
        "id": "3bfd21347895c215",
        "type": "debug",
        "z": "2325619c7893e2d0",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 100,
        "wires": []
    },
    {
        "id": "fa7e8cf4f47c6c30",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "lux & pir payload extraction function",
        "func": "// TTN MQTT payload extraction function for Node-RED\n// This function assumes the TTN uplink message has the following structure:\n// {\n//   ...,\n//   \"uplink_message\": {\n//       ...,\n//       \"frm_payload\": \"ABAA\",\n//       ...\n//   }\n// }\n\n// Check if the incoming msg.payload is a string and parse it if needed.\nvar ttnMsg = msg.payload;\nif (typeof ttnMsg === \"string\") {\n    try {\n        ttnMsg = JSON.parse(ttnMsg);\n    } catch (err) {\n        node.error(\"Invalid JSON payload: \" + err);\n        return null;\n    }\n}\n\n// Verify the payload contains the uplink_message and frm_payload properties.\nif (!ttnMsg.uplink_message || !ttnMsg.uplink_message.frm_payload) {\n    node.error(\"Missing uplink_message or frm_payload in message\");\n    return null;\n}\n\n// Get the base64 encoded payload.\nvar frmPayload = ttnMsg.uplink_message.frm_payload;\n\n// Decode the base64 payload into a buffer.\nvar buffer = Buffer.from(frmPayload, 'base64');\n\n// Ensure the payload has at least 3 bytes (2 for ambient light, 1 for PIR sensor).\nif (buffer.length < 3) {\n    node.error(\"Payload is too short. Expected at least 3 bytes.\");\n    return null;\n}\n\n// Extract ambient light value from the first two bytes (big-endian).\nvar lux = (buffer[0] << 8) | buffer[1];\n\n// Extract PIR sensor value from the third byte.\nvar pir = buffer[2];\n\n// You can add further processing here if needed.\n// Set the decoded data as the new msg.payload.\nmsg.payload = {\n    lux: lux,      // Ambient light intensity in lux\n    pir: pir,      // PIR sensor reading (0 or 1)\n    // raw: buffer.toString('hex')  // Optional: Raw payload in hex for debugging\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 100,
        "wires": [
            [
                "3bfd21347895c215",
                "ac69b93263e61f38",
                "78595b1c65273464"
            ]
        ]
    },
    {
        "id": "82e913946ea611d7",
        "type": "mqtt in",
        "z": "2325619c7893e2d0",
        "name": "",
        "topic": "v3/smart-agriculture-app@ttn/devices/device-2/up",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "a945e3db5ff6ef2b",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 300,
        "wires": [
            [
                "dc88c57b04bca2da"
            ]
        ]
    },
    {
        "id": "21251c87160238d7",
        "type": "debug",
        "z": "2325619c7893e2d0",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 300,
        "wires": []
    },
    {
        "id": "dc88c57b04bca2da",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "moisture payload extraction function",
        "func": "/*\n  This Node-RED function extracts sensor data from a TTN MQTT message.\n  It decodes the base64-encoded \"frm_payload\" field and converts the first two bytes\n  into a sensor value (assuming a two-byte big-endian encoded value).\n*/\n\nif (\n    msg.payload &&\n    msg.payload.uplink_message &&\n    msg.payload.uplink_message.frm_payload\n) {\n    // Get the base64 encoded payload\n    var base64Payload = msg.payload.uplink_message.frm_payload;\n    \n    // Decode the base64 payload to a Buffer\n    var buffer = Buffer.from(base64Payload, 'base64');\n    \n    // Ensure we have at least two bytes of data\n    if (buffer.length >= 2) {\n        // Combine the two bytes to get the sensor value (big-endian)\n        var sensorValue = (buffer[0] << 8) | buffer[1];\n        \n        // You can also extract additional fields if needed:\n        // var deviceID = msg.payload.end_device_ids.device_id;\n        // var receivedAt = msg.payload.received_at;\n        \n        // Set the new payload to an object with the extracted sensor value.\n        msg.payload = { moistureSensorValue: sensorValue };\n    } else {\n        // If the payload is shorter than expected\n        msg.payload = { error: \"Payload too short to extract sensor value.\" };\n    }\n} else {\n    // If the message structure does not match the expected TTN format\n    msg.payload = { error: \"Invalid TTN payload structure.\" };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 300,
        "wires": [
            [
                "21251c87160238d7",
                "0abb1b1e65963195",
                "083534069aa76afc"
            ]
        ]
    },
    {
        "id": "515ba823ae6920eb",
        "type": "mqtt out",
        "z": "2325619c7893e2d0",
        "name": "",
        "topic": "v3/smart-agriculture-app@ttn/devices/device-2/down/push",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a945e3db5ff6ef2b",
        "x": 890,
        "y": 600,
        "wires": []
    },
    {
        "id": "0abb1b1e65963195",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "moisture relay control function",
        "func": "/*\n   This node reads msg.payload.moistureSensorValue (set by your existing extraction node).\n   If moistureSensorValue < 300, it sends the downlink to turn the relay ON (\"AQ==\").\n   Otherwise, it sends the downlink to turn the relay OFF (\"AA==\").\n*/\n\n// Check if moistureSensorValue exists\nif (msg.payload && msg.payload.moistureSensorValue !== undefined) {\n    let sensorValue = msg.payload.moistureSensorValue;\n\n    if (sensorValue < 300) {\n        // Relay ON\n        msg.payload.moisture = {\n            downlinks: [\n                {\n                    f_port: 1,\n                    frm_payload: \"AQ==\", // Base64 for ON\n                    priority: \"HIGH\"\n                }\n            ]\n        };\n    } else {\n        // Relay OFF\n        msg.payload.moisture = {\n            downlinks: [\n                {\n                    f_port: 1,\n                    frm_payload: \"AA==\", // Base64 for OFF\n                    priority: \"HIGH\"\n                }\n            ]\n        };\n    }\n} else {\n    // Handle error: sensor value not found\n    //msg.payload.moisture = { error: \"No moistureSensorValue found in msg.payload.\" };\n    return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 360,
        "wires": [
            [
                "61c3b90cf99a473f",
                "40d0dfc16b6a6eba",
                "73b9d709e1f98f31"
            ]
        ]
    },
    {
        "id": "f4611da47ae7ef01",
        "type": "telegram receiver",
        "z": "2325619c7893e2d0",
        "name": "",
        "bot": "0ec807ffa95d75c2",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 130,
        "y": 600,
        "wires": [
            [
                "9fec59b334d322ff"
            ],
            [
                "9fec59b334d322ff"
            ]
        ]
    },
    {
        "id": "9fec59b334d322ff",
        "type": "debug",
        "z": "2325619c7893e2d0",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 600,
        "wires": []
    },
    {
        "id": "3d9db6c0268bb827",
        "type": "telegram sender",
        "z": "2325619c7893e2d0",
        "name": "",
        "bot": "0ec807ffa95d75c2",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1210,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "ac69b93263e61f38",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "send pir motion alert function",
        "func": "// Retrieve the previous PIR state from context (default to 0 if not set)\nvar prevPir = context.get('prevPir') || 0;\n\n// Extract the current PIR value from the incoming payload\nvar currentPir = (msg.payload && typeof msg.payload.pir !== 'undefined') ? msg.payload.pir : 0;\n\n// Only send a message if the PIR value changes from 0 to 1\nif (prevPir === 0 && currentPir === 1) {\n    // Update context with the current state\n    context.set('prevPir', currentPir);\n\n    // Build the Telegram-compatible payload\n    msg.payload = {\n        chatId: -4640844747,  // Example chat ID\n        type: \"message\",\n        content: \"🚨 PIR Motion Detected Object!\"\n    };\n    // Remove any extraneous options property to prevent conflicts\n    delete msg.options;\n    return msg;\n} else {\n    // Update the stored state even if no message is sent\n    context.set('prevPir', currentPir);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 40,
        "wires": [
            [
                "3d9db6c0268bb827"
            ]
        ]
    },
    {
        "id": "835a168b723e1bc8",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "send relay status toggle function",
        "func": "// Ensure payload exists and contains a valid downlink array\nif (msg.payload && msg.payload.downlinks && msg.payload.downlinks.length > 0) {\n    // Extract the relay command from the first downlink item\n    let relayPayload = msg.payload.downlinks[0].frm_payload;\n    let currentState;\n\n    // Determine current state from payload\n    if (relayPayload === \"AQ==\") { // Relay is ON\n        currentState = \"ON\";\n    } else if (relayPayload === \"AA==\") { // Relay is OFF\n        currentState = \"OFF\";\n    } else {\n        // If the frm_payload is not recognized, drop the message or handle error\n        return null;\n    }\n\n    // Retrieve the previous state from context (node-level storage)\n    let previousState = context.get(\"previousState\");\n\n    // If previous state is not set (first run), initialize it without sending a message\n    if (previousState === undefined) {\n        context.set(\"previousState\", currentState);\n        return null;\n    }\n\n    // If the current state is the same as the previous, do nothing (no state change)\n    if (currentState === previousState) {\n        return null;\n    }\n\n    // A state change occurred; update the stored previous state\n    context.set(\"previousState\", currentState);\n\n    // Prepare the Telegram message payload based on the new state with different emojis\n    if (currentState === \"ON\") {\n        msg.payload = {\n            chatId: -4640844747,  // Use your specific Telegram chat ID here\n            type: \"message\",\n            content: \"Pump Relay On 🚰\"\n        };\n    } else if (currentState === \"OFF\") {\n        msg.payload = {\n            chatId: -4640844747,  // Use your specific Telegram chat ID here\n            type: \"message\",\n            content: \"Pump Relay Off 🚱\"\n        };\n    }\n\n    // Clean up any extraneous properties that might conflict with the Telegram node\n    delete msg.options;\n    return msg;\n} else {\n    // If no valid payload is found, drop the message\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 280,
        "wires": [
            [
                "3d9db6c0268bb827"
            ]
        ]
    },
    {
        "id": "845690049a01303a",
        "type": "influxdb out",
        "z": "2325619c7893e2d0",
        "influxdb": "26757a6357b4f1b9",
        "name": "influxdb",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "hslcing",
        "bucket": "IoT",
        "x": 880,
        "y": 200,
        "wires": []
    },
    {
        "id": "78595b1c65273464",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "send lux/pir sensor data to influxdb function",
        "func": "// Check if payload exists\nif (!msg.payload) {\n    node.error(\"No payload found\");\n    return null;\n}\n\n// Assume the incoming payload has properties: lux and pir\nvar sensorData = msg.payload;\n\n// Give the measurement name to msg.measurement\nmsg.measurement = \"ttn_sensor\";\n\n// Put your sensor fields in msg.payload\nmsg.payload = {\n    lux: sensorData.lux,\n    pir: sensorData.pir\n};\n\n// Optionally, include a custom timestamp in msg.timestamp\nmsg.timestamp = new Date();\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 160,
        "wires": [
            [
                "845690049a01303a"
            ]
        ]
    },
    {
        "id": "083534069aa76afc",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "send moisture sensor data to influxdb function",
        "func": "\n// Check if payload exists and doesn't already contain an error\nif (!msg.payload || msg.payload.error) {\n    node.error(\"Invalid or missing moisture sensor data: \" + (msg.payload ? msg.payload.error : \"No payload\"));\n    return null;\n}\n\n// Retrieve the moisture sensor value from the previous function\nvar sensorValue = msg.payload.moistureSensorValue;\n\n// Validate that the sensor value is a number\nif (typeof sensorValue !== 'number') {\n    node.error(\"Sensor value is not a number.\");\n    return null;\n}\n\n// Set the measurement name for InfluxDB\nmsg.measurement = \"ttn_sensor\";\n\n// Format the payload with the sensor value for InfluxDB\nmsg.payload = {\n    moistureSensorValue: sensorValue\n};\n\n// Optionally add a timestamp (InfluxDB will use this as the measurement time)\nmsg.timestamp = new Date();\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "845690049a01303a"
            ]
        ]
    },
    {
        "id": "http_request_1",
        "type": "http request",
        "z": "2325619c7893e2d0",
        "name": "NEA 2-Hr Forecast",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api-open.data.gov.sg/v2/real-time/api/two-hr-forecast",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 420,
        "wires": [
            [
                "73b9d709e1f98f31",
                "6e1c34fc277ce51e"
            ]
        ]
    },
    {
        "id": "73b9d709e1f98f31",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "rain forecast & moisture relay control function",
        "func": "// Check if sensor payload from the first node exists\nif (\n    msg.payload.moisture &&\n    msg.payload.moisture.downlinks &&\n    msg.payload.moisture.downlinks[0] &&\n    msg.payload.moisture.downlinks[0].frm_payload\n) {\n    let sensorCommand = msg.payload.moisture.downlinks[0].frm_payload;\n    \n    if (sensorCommand === \"AA==\") {\n        // Sensor commands relay OFF; override and send relay OFF.\n        msg.payload = {\n            downlinks: [\n                {\n                    f_port: 1,\n                    frm_payload: \"AA==\", // Relay OFF\n                    priority: \"HIGH\"\n                }\n            ]\n        };\n        return msg;\n    } else if (sensorCommand === \"AQ==\") {\n        // Sensor commands relay ON; do nothing further and return null.\n        return null;\n    }\n}\n\n// If no sensor payload is provided, then process forecast data:\nif (\n    msg.payload &&\n    msg.payload.data &&\n    msg.payload.data.items &&\n    Array.isArray(msg.payload.data.items) &&\n    msg.payload.data.items.length > 0\n) {\n    // Assume the first item contains forecast info\n    let forecasts = msg.payload.data.items[0].forecasts;\n    let punggolForecast = null;\n    \n    // Look for forecast for Punggol\n    for (let i = 0; i < forecasts.length; i++) {\n        if (forecasts[i].area === \"Punggol\") {\n            punggolForecast = forecasts[i].forecast;\n            break;\n        }\n    }\n    \n    if (punggolForecast) {\n        // Check forecast text for \"rain\" or \"showers\" (case-insensitive)\n        let forecastLower = punggolForecast.toLowerCase();\n        if (forecastLower.includes(\"rain\") || forecastLower.includes(\"showers\")) {\n            // Forecast indicates rain: turn relay OFF.\n            msg.payload = {\n                downlinks: [\n                    {\n                        f_port: 1,\n                        frm_payload: \"AA==\", // Relay OFF\n                        priority: \"HIGH\"\n                    }\n                ]\n            };\n        } else {\n            // Otherwise, turn relay ON.\n            msg.payload = {\n                downlinks: [\n                    {\n                        f_port: 1,\n                        frm_payload: \"AQ==\", // Relay ON\n                        priority: \"HIGH\"\n                    }\n                ]\n            };\n        }\n    } else {\n        // No forecast available for Punggol.\n        msg.payload = { error: \"No forecast found for area Punggol.\" };\n    }\n} else {\n    // Expected forecast data structure is missing.\n    msg.payload = { error: \"No forecast data found in msg.payload.\" };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 420,
        "wires": [
            [
                "4b8acdbdcdb97470",
                "515ba823ae6920eb",
                "835a168b723e1bc8",
                "f4111424fdf23f35"
            ]
        ]
    },
    {
        "id": "61c3b90cf99a473f",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "trigger NEA forecast if relay on: soil dry function",
        "func": "/*\n   This function checks the output of the previous relay control node.\n   If Relay is ON (frm_payload \"AQ==\"), it triggers the NEA API HTTP GET by setting the payload to the current date.\n   If Relay is OFF (frm_payload \"AA==\"), it does nothing.\n*/\n\nif (msg.payload.moisture && msg.payload.moisture.downlinks && msg.payload.moisture.downlinks.length > 0) {\n    let relayState = msg.payload.moisture.downlinks[0].frm_payload;\n    \n    if (relayState === \"AQ==\") {\n        // Relay is ON: set payload to current date/time to trigger the HTTP GET request.\n        msg.payload = new Date();  // current date/time as a Date object\n        return msg;\n    } else {\n        // Relay is OFF: do nothing.\n        return null;\n    }\n} else {\n    // If the expected structure is missing, do nothing.\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 420,
        "wires": [
            [
                "http_request_1"
            ]
        ]
    },
    {
        "id": "7b7684f4a9cc32e1",
        "type": "influxdb out",
        "z": "2325619c7893e2d0",
        "influxdb": "26757a6357b4f1b9",
        "name": "influxdb",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "hslcing",
        "bucket": "IoT",
        "x": 1120,
        "y": 520,
        "wires": []
    },
    {
        "id": "4b8acdbdcdb97470",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "send relay status toggle to influxdb",
        "func": "// Ensure payload exists and contains a valid downlink array\nif (msg.payload && msg.payload.downlinks && msg.payload.downlinks.length > 0) {\n    // Extract the relay command from the first downlink item\n    let relayPayload = msg.payload.downlinks[0].frm_payload;\n    let currentState;\n\n    // Determine current state from payload\n    if (relayPayload === \"AQ==\") { // Relay is ON\n        currentState = \"ON\";\n    } else if (relayPayload === \"AA==\") { // Relay is OFF\n        currentState = \"OFF\";\n    } else {\n        // If the frm_payload is not recognized, drop the message or handle error\n        return null;\n    }\n\n    // Retrieve the previous state from context (node-level storage)\n    let previousState = context.get(\"previousState\");\n\n    // If previous state is not set (first run), initialize it without sending a message\n    if (previousState === undefined) {\n        context.set(\"previousState\", currentState);\n        return null;\n    }\n\n    // If the current state is the same as the previous, do nothing (no state change)\n    if (currentState === previousState) {\n        return null;\n    }\n\n    // A state change occurred; update the stored previous state\n    context.set(\"previousState\", currentState);\n\n    // Prepare the InfluxDB payload with the new relay state\n    msg.measurement = \"ttn_sensor\"; // Set the measurement name for InfluxDB\n    msg.payload = {\n        relayState: currentState\n    };\n    // Optionally add a timestamp (InfluxDB will use this as the measurement time)\n    msg.timestamp = new Date();\n\n    return msg;\n} else {\n    // If no valid payload is found, drop the message\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 540,
        "wires": [
            [
                "7b7684f4a9cc32e1"
            ]
        ]
    },
    {
        "id": "6e1c34fc277ce51e",
        "type": "function",
        "z": "2325619c7893e2d0",
        "name": "send rain forecast to influxdb function",
        "func": "// Check if payload exists and doesn't already contain an error\nif (!msg.payload || msg.payload.error) {\n    node.error(\"Invalid or missing forecast data: \" + (msg.payload ? msg.payload.error : \"No payload\"));\n    return null;\n}\n\n// Verify the expected forecast data structure exists\nif (!msg.payload.data || !msg.payload.data.items || !Array.isArray(msg.payload.data.items) || msg.payload.data.items.length === 0) {\n    node.error(\"Forecast data structure is missing or empty.\");\n    return null;\n}\n\n// Retrieve the forecasts array from the first item\nvar forecasts = msg.payload.data.items[0].forecasts;\nif (!forecasts || !Array.isArray(forecasts)) {\n    node.error(\"Forecasts array is missing or not an array.\");\n    return null;\n}\n\n// Find the forecast for the \"Punggol\" area\nvar punggolForecast = null;\nfor (var i = 0; i < forecasts.length; i++) {\n    if (forecasts[i].area === \"Punggol\") {\n        punggolForecast = forecasts[i].forecast;\n        break;\n    }\n}\n\n// Validate that a forecast was found and is a string\nif (typeof punggolForecast !== 'string') {\n    node.error(\"Forecast for Punggol not found or invalid.\");\n    return null;\n}\n\n// Set the measurement name for InfluxDB\nmsg.measurement = \"ttn_sensor\";\n\n// Format the payload for InfluxDB with the Punggol forecast\nmsg.payload = {\n    punggolForecast: punggolForecast\n};\n\n// Optionally add a timestamp (InfluxDB will use this as the measurement time)\nmsg.timestamp = new Date();\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 480,
        "wires": [
            [
                "7b7684f4a9cc32e1"
            ]
        ]
    },
    {
        "id": "f4111424fdf23f35",
        "type": "debug",
        "z": "2325619c7893e2d0",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 420,
        "wires": []
    },
    {
        "id": "40d0dfc16b6a6eba",
        "type": "debug",
        "z": "2325619c7893e2d0",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 360,
        "wires": []
    }
]